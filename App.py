import os
import pdfplumber
import logging
import re
import streamlit as st
from st_copy_to_clipboard import st_copy_to_clipboard
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_groq import ChatGroq
from langchain.chains import RetrievalQA
from langchain_community.vectorstores import FAISS


class QuizGenerator:
    def __init__(self, groq_api_key):
        os.environ["GROQ_API_KEY"] = groq_api_key
        self.embeddings = HuggingFaceEmbeddings(model_name = "sentence-transformers/all-MiniLM-L6-v2")
        self.llm = ChatGroq(temperature = 0.7, model_name = "llama3-70b-8192")

    @staticmethod
    def extract_text_from_pdf(pdf_path):
        sensitive_info_patterns = [
            r'\b\d{9,12}\b',
            r'\b\d{10}\b',
            r'\b[\w\.-]+@[\w\.-]+\.\w+\b'
        ]
        sensitive_info_patterns = [re.compile(pattern) for pattern in sensitive_info_patterns]

        bullet_patterns = [
            r'^\s*[\u2022\u25E6\u26AB]\s+',
            r'^\s*[-‚Ä¢‚àô‚ó¶‚óé‚¶ø‚¶æ]\s+'
        ]
        bullet_patterns = [re.compile(pattern, re.MULTILINE) for pattern in bullet_patterns]

        text = ""
        try:
            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    try:
                        filtered_text = page.extract_text() or ""

                        for pattern in sensitive_info_patterns:
                            filtered_text = pattern.sub('', filtered_text)

                        for pattern in bullet_patterns:
                            filtered_text = pattern.sub('', filtered_text)

                        text += filtered_text

                    except Exception as e:
                        logging.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc trang PDF: {str(e)}")
                        continue

        except Exception as e:
            raise Exception(f"L·ªói khi ƒë·ªçc file PDF: {str(e)}")

        if not text.strip():
            raise Exception("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c vƒÉn b·∫£n t·ª´ file PDF")

        return text

    @staticmethod
    def create_chunks(text):
        text_splitter = RecursiveCharacterTextSplitter(chunk_size = 1000,
                                                       chunk_overlap = 200,
                                                       length_function = len)
        chunks = text_splitter.split_text(text)

        return chunks


    def generate_quiz(self, vectorstore, num_questions):
        qa = RetrievalQA.from_chain_type(llm = self.llm,
                                         chain_type = "stuff",
                                         retriever = vectorstore.as_retriever())

        prompt = f"""D·ª±a tr√™n n·ªôi dung vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p, h√£y t·∫°o {num_questions} c√¢u h·ªèi tr·∫Øc nghi·ªám.
        M·ªói c√¢u h·ªèi ph·∫£i c√≥ 4 l·ª±a ch·ªçn v√† ch·ªâ c√≥ 1 ƒë√°p √°n ƒë√∫ng.
        Format cho m·ªói c√¢u h·ªèi nh∆∞ sau:

        C√¢u h·ªèi N: [c√¢u h·ªèi]
        A. [l·ª±a ch·ªçn]
        B. [l·ª±a ch·ªçn]
        C. [l·ª±a ch·ªçn]
        D. [l·ª±a ch·ªçn]
        ƒê√°p √°n ƒë√∫ng: [A/B/C/D]
        """

        quiz = qa.invoke(prompt)
        return quiz


    def process_and_generate(self, file_path, num_questions = 10):
        try:
            text = self.extract_text_from_pdf(file_path)

            chunks = self.create_chunks(text)

            vectorstore = FAISS.from_texts(texts = chunks, embedding = self.embeddings)

            quiz = self.generate_quiz(vectorstore, num_questions)

            return quiz['result']

        except Exception as e:
            logging.error(f"L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω file v√† t·∫°o quiz: {str(e)}")


def main():
    st.set_page_config(page_title = "Quiz Generator", layout = "wide")
    st.title("Quiz Generator")

    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        groq_api_key = st.text_input("Nh·∫≠p Groq API Key: ", type = "password")

        st.markdown("---")

    if not groq_api_key:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Groq API key ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return

    uploaded_file = st.file_uploader("üìÅ Upload PDF file: ", type = "pdf")

    if uploaded_file:
        num_questions = st.slider("S·ªë l∆∞·ª£ng c√¢u h·ªèi: ", min_value = 5, max_value = 30, value = 5)

        if st.button("üìÉ T·∫°o Quiz"):
            with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω. Vui l√≤ng ch·ªù..."):
                try:
                    quiz_generator = QuizGenerator(groq_api_key)
                    quiz = quiz_generator.process_and_generate(uploaded_file, num_questions)
                    st.session_state['generated_quiz'] = quiz

                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

    if 'generated_quiz' in st.session_state:
        st.subheader("Quiz ƒë∆∞·ª£c t·∫°o: ")
        st.text_area("", value = st.session_state['generated_quiz'], height = 400)

        # if st.button("üìã Sao ch√©p Quiz"):
        st.toast("ƒê√£ sao ch√©p Quiz v√†o b·ªô nh·ªõ t·∫°m!")
        st_copy_to_clipboard(st.session_state['generated_quiz'], "üìã Sao ch√©p Quiz", "üìã ƒê√£ sao ch√©p!")


main()